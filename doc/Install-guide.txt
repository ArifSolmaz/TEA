
            =============== Install guide for TEA ==================
                                Version 1.0

This is an installation guide for the Thermochemical Equilibrium Abundances 
(TEA) code. The code calculates equilibrium abundances of the gaseous molecular
species in planetary atmospheres. It works with high numerical precision, 
without adjustments, for fractional abundances (mixing fractions) up to 
10e-14 and a temperature range of 1000 - 4000 K. For temperatures below 
1000 K and mixing fractions below 10e-14, the code produces results with low 
precision. The output can be improved with fine adjustments to the lambda 
exploration variables in lambdacorr.py module (see documentation).

******************************* START LICENSE *******************************
Thermal Equilibrium Abundances (TEA), a code to calculate gaseous molecular
abundances in planetary atmospheres under thermochemical equilibrium
conditions.

This project was completed with the support of the NASA Earth and Space 
Science Fellowship Program, grant NNX12AL83H, held by Jasmina Blecic, 
PI Joseph Harrington. Project developers included graduate student 
Jasmina Blecic and undergraduate M. Oliver Bowman. 

Copyright (C) 2014 University of Central Florida.  All rights reserved.

This is a test version only, and may not be redistributed to any third
party.  Please refer such requests to us.  This program is distributed
in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.

We welcome your feedback, but do not guarantee support.  Please send
feedback or inquiries to both:

Jasmina Blecic <jasmina@physics.ucf.edu>
Joseph Harrington <jh@physics.ucf.edu>

or alternatively,

Jasmina Blecic and Joseph Harrington
UCF PSB 441
4000 Central Florida Blvd
Orlando, FL 32816-2385
USA

Thank you for testing TEA!
******************************* END LICENSE *******************************


1. ==== Packages ====

   Ensure following python packages are installed:
          Python: 2.7.3+
          NumPy:  1.6.1+
          SymPy:  0.7.1.rc1 (This version ensures maximum performance)
   
          Sympy download:
                https://github.com/sympy/sympy/releases/tag/sympy/0.7.1.rc1


2. ==== Content ====

   Download TEA from www.github.com/dzesmin/TEA
          - git clone https://github.com/dzesmin/TEA

   The following should be included:
 
   1. README
          - file with basic directions

   2. == doc ==  
          - directory containing:
            - 'examples' directory with:
                 - 'multiTP' directory containing multiTP example run
                 - 'singleTP' directory containing singleTP example run
                 - 'PT' directory containing several examples of the 
                    pressure and temperature profile
            - TEA Theory - document containing theory part of the code
            - TEA User Guide - document containing user guide
            - TEA Code Description - document containing program description
            - install_guide.txt - this file

   3. == janaf == 
          - directory containing JANAF tables in their raw format
                (download from October 2012)

   4. == lib == 
          - directory containing:
            - abundances.txt - elemental abundances file, Asplund et al 2009, IUPAC
                http://adsabs.harvard.edu/abs/2009ARA%26A..47..481A
            - TEA_config.py - configuration file
            - gdata - directory containing thermochemical data of interest
                from JANAF tables
            - stoich.txt - stoichiometric data file
            - conversion_record_sorted.txt - record of converted JANAF files produces
                after readJANAF.py is run. The run will produces unsorted 
                conversion_record.txt file. To sort the content alphabetically, do:
                sort conversion_record.txt >conversion_record_sorted.txt

    5. == prepipe == 
            - directory containing source files to produce thermochemical 
              library and stoichiometric information:
              directory gdata/, conversion_record.txt, and stoich.txt
                prepipe.py (*)
                makestoich.py (*)
                readJANAF.py (*)
    6. == tea ==
            - directory containing tea source files:
                balance.py (*)
                format.py
                iterate.py (*)
                lagrange.py
                lambdacorr.py
                makeheader.py
                readatm.py
                runatm.py (*)
                runsingle.py (*)
            - and tea supporting modules:
                makeatm.py (*)
                plotTEA.py (*)
                readconfig.py

            Asterisk (*) indicates modules that must be executable in 
            *nix (e.g., Linux) systems.


3. ==== Run pre-pipeline ====

   Files and directory produced by this run are already distributed with the 
          code (lib/gdata, lib/stoich.txt, and lib/conversion_record.txt),
          thus there is no need to run the code again. However, if new
          JANAF files become available, the user can re-run the code with the
          new data. The code reads only the JANAF tables in the format 
          provided in October 2012.

   To re-run the code with new JANAF tables, create a working directory.
          From 'TEA/lib/' folder, copy TEA.cfg file into your working directory.
          Open TEA.cfg and adjust parameters. Run pre-pipeline as:
    - run ../TEA/prepipe/prepipe.py

   OPTIONAL (run separately):
    - run ../TEA/prepipe/makestoch.py
    - run ../TEA/prepipe/readJANAF.py

   This run will produce data needed for TEA to run, and place them in lib/ directory:
          1. gdata/, directory with thermochemical data
          2. stoich.txt, stoichiometric file carrying stoichiometric values for
             each species in JANAF tables
          3. conversion_record.txt, a record of converted JANAF files required
             for the user to track the species available in the JANAF tables 
             and compare them with the names produced by TEA. This ensures the
             correct pre-atmospheric file is made (see section below).  To sort 
             the content of the conversion_record.txt alphabetically, do:
             sort conversion_record.txt >conversion_record_sorted.txt

   If doprint is set to 'True' in TEA.cfg, the following directory is also created:
          stochcoeff/ - directory containing a file per species with 
                        stoichiometric values for each species

4. ==== Produce input file ====

   If working directory is not made, make one. From 'TEA/lib/' folder, copy 
             TEA.cfg file into your working directory. Open TEA.cfg 
             and adjust parameters. Use gdata/ folder or the 
             conversion_record_sorted.txt to look up the correct names and 
             states of input/output species that TEA can accept.

   For single-TP:
             To create a custom input file, follow the key in the example.
             See example in ../TEA/doc/examples/singleTP/inputs/inp_Example.txt

   For multiple-TP: 
             To create a custom pre-atmospheric file either follow design
             of the example or execute makeatm.py. See example in 
             ../TEA/doc/examples/multiTP/atm_inputs/multiTP.atm

             Procedure to create pre-atmospheric file with makeatm.py:
             a) If working directory is not made, make one. 
             b) From 'TEA/lib/' folder, copy TEA.cfg file into your 
                working directory.
             c) Open TEA.cfg and adjust parameters. Edit both sections. 
                Run makeatm.py as:
                ../TEA/tea/makeatm.py <DESCRIPTION_OF_RUN>
                note: DESCRIPTION_OF_RUN is the name of the directory that
                      will be made below the current working directory
                Example: ../TEA/tea/makeatm.py multiTP
                The pre-atm file will be placed in the atm_inputs/ directory
                and will have an extension as given in TEA.cfg (default:.atm).


5. ==== Execute TEA ====

   If working directory is not made, make one. From 'TEA/lib/' folder, copy 
             TEA.cfg file into your working directory. Open TEA.cfg and adjust
             parameters. Only 'TEA SECTION' is used while TEA is running. Except for
             'maxiter' parameter, all other parameters are for debugging 
             purposes. Setting them to 'False' will ensure the fastest execution.

   For single-TP: 
             In shell from the working directory type:
             ../TEA/tea/runsingle.py <SINGLETP_INPUT_FILE> <DESCRIPTION_OF_RUN>
             note: DESCRIPTION_OF_RUN is the name of the directory that
                   will be made below the current working directory
             Example: ../TEA/tea/runsingle.py ../TEA/doc/examples/singleTP/inputs/inp_Example.txt singleTP

             Results will be placed in <DESCRIPTION_OF_RUN>/results/
             note: DESCRIPTION_OF_RUN is the name of the directory that
                   will be made below the current working directory
             Example: ../TEA/doc/examples/singleTP/results/

             This runs TEA for just one temperature and pressure. The current iteration
             number is printed on-screen as the code progresses. The execution time
             for the example given 2-5 seconds.

   For multiple-TP: 
             In shell from the working directory type:
             1. If multiTP input file is made with the makeatm.py:
             ../TEA/tea/runatm.py <PATH_TO_DESCRIPTION_OF_RUN_DIR>/atm_inputs/<MULTITP_INPUT_FILE> <DESCRIPTION_OF_RUN>
             note: PATH_TO_DESCRIPTION_OF_RUN_DIR is the path to the directory, 
                   DESCRIPTION_OF_RUN, that you have already created when 
                   makeatm.py is run.
             2. If custom made multiTP input file is produced on other location:
             ../TEA/tea/runatm.py <MULTITP_INPUT_FILE> <DESCRIPTION_OF_RUN>
             note: DESCRIPTION_OF_RUN is the name of the directory that
                   will be made below the current working directory.
             Example: ../TEA/tea/runatm.py ../TEA/doc/examples/multiTP/atm_inputs/multiTP_Example.atm multiTP

             This will run TEA for every T-P line of the pre-atm file. The current line
             number of the pre-atm file and current iteration number is printed on-screen
             as the code progresses. The execution time for the example given should be 
             between 5-10 minutes.
    
             Results will be placed in <DESCRIPTION_OF_RUN>/results/
             note: DESCRIPTION_OF_RUN is the name of the directory that
                   will be made below the current working directory
             Example: ../TEA/doc/examples/multiTP/results/
             The final TEA output will have an extension .tea and will
             have the name of the DESCRIPTION_OF_RUN.


6.  ==== Output ====

    After running makeatm.py, the following directory and files should be created
    below working directory:

             Output directory based on the user <RESULT_DIR_NAME>.
             Below this directory:

                atm_inputs/ - stores all input files used to run makeatm.py:
                              abundances file - abundances.txt
                              pressure and temperature file - PTprofile.dat
                              TEA config file - TEA.cfg
                              multi TP pre-atmospheric file - pre-atm.atm
    
    After running TEA, the following directories and files should be created
    below working directory:

             Output directory based on the user <RESULT_DIR_NAME>.
             Below this directory:

                inputs/    - directory that stores input files used to run TEA
                results/   - directory that contains final results

                            For single-TP:
                                abundances file - abundances.txt
                                TEA config file - TEA.cfg
                                single TP input file - singleTP.txt

                            For multiple-TP:
                                abundances file - abundances.txt
                                TEA config file - TEA.cfg
                                multi TP pre-atmospheric file - pre-atm.txt

                headers/ and outputs/ directories are temporary made, overwritten
                in each run/iteration and finally deleted after the full TEA run
                is finished.

                If doprint, save_headers, and save_outputs are set to 'True' in
                TEA.cfg, the following are also created:
    
                headers/   - directory that preserves and stores all headers
                outputs/   - directory that stores all intermediate files


7. ==== Plot TEA ====

   To plot the final results, run plotTEA.py. Instructions on how
             to execute the code are found in ../TEA/tea/plotTEA.py documentation.
             Example: ../TEA/tea/plotTEA.py ../TEA/doc/examples/multiTP/results/multiTP_Example.tea CO,CH4,H2O,NH3
             Plots will be placed in ./plots/ directory.

   Recall, TEA numerical precision is limited to fractional abundances 
   of 10e-14.


======================
POTENTIAL USER ERRORS 
======================

1. All elements present in the system must be included explicitly in the 
    output species list.

2. Species names must be identical to those in the thermodynamic directory
    (gdata/) produced by readJANAF.py. See conversion_record_sorted.txt
    file (or gdata/ directory) for correct species names.

2. Hydrogen is the most abundant element in the universe. As such, if H_g
    is listed as an input elemental species, H2_ref must be included as an
    output molecular species to get a valid result.

