
# ******************************* START LICENSE *******************************
# Thermal Equilibrium Abundances (TEA), a code to calculate gaseous molecular
# abundances in planetary atmospheres under thermochemical equilibrium
# conditions.
#
# This project was completed with the support of the NASA Earth and Space 
# Science Fellowship Program, grant NNX12AL83H, held by Jasmina Blecic, 
# PI Joseph Harrington. Project developers included graduate student 
# Jasmina Blecic and undergraduate M. Oliver Bowman. 
# 
# Copyright (C) 2014 University of Central Florida.  All rights reserved.
# 
# This is a test version only, and may not be redistributed to any third
# party.  Please refer such requests to us.  This program is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.
# 
# We welcome your feedback, but do not guarantee support.  Please send
# feedback or inquiries to both:
# 
# Jasmina Blecic <jasmina@physics.ucf.edu>
# Joseph Harrington <jh@physics.ucf.edu>
# 
# or alternatively,
# 
# Jasmina Blecic and Joseph Harrington
# UCF PSB 441
# 4000 Central Florida Blvd
# Orlando, FL 32816-2385
# USA
# 
# Thank you for testing TEA!
# ******************************* END LICENSE *******************************

# ============================================================================= 
# Configuration file containing two sections: 
# 1. TEA section with parameters and booleans to run and debug TEA.
# 2. PRE-ATM section with parameters to make pre-atmospheric file. 
# ============================================================================= 


# =============================== TEA SECTION =================================
# Change the parameters below to control how TEA runs. The default number of 
# iterations in 'maxiter' parameter is the optimal value for common molecular
# species in hot Jupiters. Following 'maxiter' parameter, next four parameters
# are for debugging purposes only. Setting them to 'False' will ensure the 
# fastest execution.
[TEA]

# === Sets maximum number of iteration ===
# (Def: 100)   Number of iterations the pipeline will run for each T-P point 
maxiter      = 100

                        
# === Controls output files ===
# (Def: False) Preserve headers
save_headers = False                  
# (Def: False) Preserve intermediate outputs     
save_outputs = False   
                        
# === Controls debugging and tracking ===
# (Def: False) Enable various debug printouts 
doprint      = False
# (Def: False) Enable time printing for speed tests         
times        = False


# === Full path to TEA package ===
# for release it should be ../tea/
location_TEA = ../TEA/tea/

# === Full path to abundances file ===
# for release it should be ../tea/lib/abundances.txt
abun_file = ../TEA/lib/abundances.txt

# === Full path to TEA working directory ===
location_out = .

# ============================= PRE-ATM SECTION ===============================
# Execution of this section is optional. The user can produce a TEA
# pre-atmospheric file by running makeatm.py, or make a custom-made file in 
# the format that TEA can read it. See the correct format in the 
# ../TEA/doc/examples/multiTP/ folder.
#
# Change the parameters below to control how pre-atmospheric file is made.
# Before executing the makeatm.py module make a pressure-temperature file. 
# Run makeatm.py as: makeatm.py <DESCRIPTION_OF_RUN>
# note: <DESCRIPTION_OF_RUN> is the name of the directory that will be made
# below the current working directory
# Example: ../TEA/tea/makeatm.py 2014-10-05
[PRE-ATM]

# === Full path to pressure and temperature file ===
# for release it should be ../tea/doc/examples/PT.dat
PT_file = ../TEA/doc/examples/PT/PT-1bar.dat

# === Desired name of multi T-P, pre-atmospheric file ===
# Use extension .atm. File will be placed in atm_inputs/.
# for release it should be pre_atm.atm
pre_atm_name    = test.atm

# === Input elements names ===
# MUST have names as they appear in periodic table.
input_elem      = H C N O

# === Output species names ===
# MUST have names as they appear in lib/gdata/ folder. 
# MUST include all elemental species.    
output_species  = H_g C_g N_g O_g H2_ref CO_g CH4_g H2O_g N2_ref NH3_g
                                                              
